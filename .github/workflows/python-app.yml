# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        flake8 . --count --exit-zero --max-line-length=127 --statistics --ignore=W503,E501,W605,E731,F401
    - name: Typechecking
      run: mypy smot/*py
    - name: Unit tests
      run: ./runtests.py
      # This is the most computationally expensive step, so put it last
    - name: Golden tests
      run: |
        pip install .
        cd test-data && make

  build:

    runs-on: ubuntu-latest

    # I don't really care if the linter and typechecker pass an older Python versions
    # so I will only run unit and golden tests
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: "3.6"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Unit tests
      run: ./runtests.py
    - name: Golden tests
      run: |
        pip install .
        cd test-data && make
